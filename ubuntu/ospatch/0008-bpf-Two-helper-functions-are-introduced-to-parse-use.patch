From 08b38fdf2f45a0d7f09a07e43cd4d1bca21c039d Mon Sep 17 00:00:00 2001
From: lec-bit <glfhmzmy@126.com>
Date: Thu, 14 Mar 2024 17:30:59 +0800
Subject: [PATCH] 0008

---
 include/uapi/linux/bpf.h       |  7 ++++++
 net/core/filter.c              | 40 ++++++++++++++++++++++++++++++++++
 tools/include/uapi/linux/bpf.h |  7 ++++++
 3 files changed, 54 insertions(+)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 44d6a8c4c..db92a7e85 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -5059,6 +5059,8 @@ union bpf_attr {
 	FN(strnstr),			\
 	FN(strnlen),			\
 	FN(_strncmp),			\
+	FN(parse_header_msg),		\
+	FN(get_msg_header_element),	\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
@@ -6249,6 +6251,11 @@ struct btf_ptr {
 	__u32 flags;		/* BTF ptr flags; unused at present. */
 };
 
+struct bpf_mem_ptr {
+	void *ptr;
+	__u32 size;
+};
+
 /*
  * Flags to control bpf_snprintf_btf() behaviour.
  *     - BTF_F_COMPACT: no formatting around type information
diff --git a/net/core/filter.c b/net/core/filter.c
index 3d7d8152b..0c68b3700 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -7217,6 +7217,42 @@ static const struct bpf_func_proto bpf_sock_ops_reserve_hdr_opt_proto = {
 	.arg3_type	= ARG_ANYTHING,
 };
 
+typedef int (*bpf_parse_protocol_func)(struct bpf_mem_ptr* msg);
+bpf_parse_protocol_func parse_protocol_func = NULL;
+EXPORT_SYMBOL(parse_protocol_func);
+
+typedef void* (*bpf_get_protocol_element_func)(char *key);
+bpf_get_protocol_element_func get_protocol_element_func = NULL;
+EXPORT_SYMBOL(get_protocol_element_func);
+
+BPF_CALL_1(bpf_parse_header_msg, struct bpf_mem_ptr *, msg)
+{
+	if (!parse_protocol_func)
+		return -ENOTSUPP;
+	return parse_protocol_func(msg);
+}
+
+static const struct bpf_func_proto bpf_parse_header_msg_proto = {
+	.func		= bpf_parse_header_msg,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_1(bpf_get_msg_header_element, char *, key)
+{
+	if (!get_protocol_element_func)
+		return -ENOTSUPP;
+	return get_protocol_element_func(key);
+}
+
+static const struct bpf_func_proto bpf_get_msg_header_element_proto = {
+	.func		= bpf_get_msg_header_element,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+};
+
 #endif /* CONFIG_INET */
 
 bool bpf_helper_changes_pkt_data(void *func)
@@ -7665,6 +7701,10 @@ sock_ops_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 		return &bpf_sock_ops_reserve_hdr_opt_proto;
 	case BPF_FUNC_tcp_sock:
 		return &bpf_tcp_sock_proto;
+	case BPF_FUNC_parse_header_msg:
+		return &bpf_parse_header_msg_proto;
+	case BPF_FUNC_get_msg_header_element:
+		return &bpf_get_msg_header_element_proto;
 #endif /* CONFIG_INET */
 	default:
 		return bpf_sk_base_func_proto(func_id);
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index f41b511cb..73a462e96 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -5059,6 +5059,8 @@ union bpf_attr {
 	FN(strnstr),			\
 	FN(strnlen),			\
 	FN(_strncmp),			\
+	FN(parse_header_msg),		\
+	FN(get_msg_header_element),	\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
@@ -6248,6 +6250,11 @@ struct btf_ptr {
 	__u32 flags;		/* BTF ptr flags; unused at present. */
 };
 
+struct bpf_mem_ptr {
+	void *ptr;
+	__u32 size;
+};
+
 /*
  * Flags to control bpf_snprintf_btf() behaviour.
  *     - BTF_F_COMPACT: no formatting around type information
-- 
2.34.1

