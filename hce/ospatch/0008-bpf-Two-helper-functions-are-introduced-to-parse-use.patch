From 9483e49b2b4e030a33ca43bebb80c3f0b2ca79e7 Mon Sep 17 00:00:00 2001
From: zhangmingyi <zhangmingyi5@huawei.com>
Date: Fri, 2 Aug 2024 16:22:27 +0800
Subject: [PATCH 8/8] 0008

---
 include/uapi/linux/bpf.h       |  7 ++++++
 net/core/filter.c              | 40 ++++++++++++++++++++++++++++++++++
 net/core/filter.c.orig         |  6 +++++
 tools/include/uapi/linux/bpf.h |  7 ++++++
 4 files changed, 60 insertions(+)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 0a72518fd..d9b65b3d9 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3920,6 +3920,8 @@ union bpf_attr {
 	FN(strnstr),			\
 	FN(strnlen),			\
 	FN(_strncmp),			\
+	FN(parse_header_msg),		\
+	FN(get_msg_header_element),	\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
@@ -5057,6 +5059,11 @@ struct btf_ptr {
 	__u32 flags;		/* BTF ptr flags; unused at present. */
 };
 
+struct bpf_mem_ptr {
+	void *ptr;
+	__u32 size;
+};
+
 /*
  * Flags to control bpf_snprintf_btf() behaviour.
  *     - BTF_F_COMPACT: no formatting around type information
diff --git a/net/core/filter.c b/net/core/filter.c
index 0feae1043..7d5eb7ca2 100644
--- a/net/core/filter.c
+++ b/net/core/filter.c
@@ -7023,6 +7023,42 @@ static const struct bpf_func_proto bpf_sock_ops_reserve_hdr_opt_proto = {
 	.arg3_type	= ARG_ANYTHING,
 };
 
+typedef int (*bpf_parse_protocol_func)(struct bpf_mem_ptr* msg);
+bpf_parse_protocol_func parse_protocol_func = NULL;
+EXPORT_SYMBOL(parse_protocol_func);
+
+typedef void* (*bpf_get_protocol_element_func)(char *key);
+bpf_get_protocol_element_func get_protocol_element_func = NULL;
+EXPORT_SYMBOL(get_protocol_element_func);
+
+BPF_CALL_1(bpf_parse_header_msg, struct bpf_mem_ptr *, msg)
+{
+	if (!parse_protocol_func)
+		return -ENOTSUPP;
+	return parse_protocol_func(msg);
+}
+
+static const struct bpf_func_proto bpf_parse_header_msg_proto = {
+	.func		= bpf_parse_header_msg,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_1(bpf_get_msg_header_element, char *, key)
+{
+	if (!get_protocol_element_func)
+		return -ENOTSUPP;
+	return get_protocol_element_func(key);
+}
+
+static const struct bpf_func_proto bpf_get_msg_header_element_proto = {
+	.func		= bpf_get_msg_header_element,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+};
+
 #endif /* CONFIG_INET */
 
 bool bpf_helper_changes_pkt_data(void *func)
@@ -7455,6 +7491,10 @@ sock_ops_func_proto(enum bpf_func_id func_id, const struct bpf_prog *prog)
 		return &bpf_sock_ops_reserve_hdr_opt_proto;
 	case BPF_FUNC_tcp_sock:
 		return &bpf_tcp_sock_proto;
+	case BPF_FUNC_parse_header_msg:
+		return &bpf_parse_header_msg_proto;
+	case BPF_FUNC_get_msg_header_element:
+		return &bpf_get_msg_header_element_proto;
 #endif /* CONFIG_INET */
 	default:
 		return bpf_sk_base_func_proto(func_id);
diff --git a/net/core/filter.c.orig b/net/core/filter.c.orig
index 8dddffc08..0feae1043 100644
--- a/net/core/filter.c.orig
+++ b/net/core/filter.c.orig
@@ -4882,6 +4882,12 @@ static int _bpf_setsockopt(struct sock *sk, int level, int optname,
 						    TCP_CA_NAME_MAX-1));
 			name[TCP_CA_NAME_MAX-1] = 0;
 			ret = tcp_set_congestion_control(sk, name, false, true);
+		} else if (optname == TCP_ULP) {
+			char name[TCP_ULP_NAME_MAX] = {0};
+
+			strncpy(name, optval, min_t(long, optlen,
+						    TCP_ULP_NAME_MAX - 1));
+			return tcp_set_ulp(sk, name);
 		} else {
 			struct inet_connection_sock *icsk = inet_csk(sk);
 			struct tcp_sock *tp = tcp_sk(sk);
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 20d739441..212606105 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -3920,6 +3920,8 @@ union bpf_attr {
 	FN(strnstr),			\
 	FN(strnlen),			\
 	FN(_strncmp),			\
+	FN(parse_header_msg),		\
+	FN(get_msg_header_element),	\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
@@ -5056,6 +5058,11 @@ struct btf_ptr {
 	__u32 flags;		/* BTF ptr flags; unused at present. */
 };
 
+struct bpf_mem_ptr {
+	void *ptr;
+	__u32 size;
+};
+
 /*
  * Flags to control bpf_snprintf_btf() behaviour.
  *     - BTF_F_COMPACT: no formatting around type information
-- 
2.33.0

