From c04721760001eb61f521f92d3cc58c9a7981181d Mon Sep 17 00:00:00 2001
From: zhangmingyi <zhangmingyi5@huawei.com>
Date: Fri, 2 Aug 2024 16:09:48 +0800
Subject: [PATCH 6/8] 0006

---
 include/uapi/linux/bpf.h       |  3 +++
 kernel/bpf/helpers.c           | 47 ++++++++++++++++++++++++++++++++++
 tools/include/uapi/linux/bpf.h | 11 +++++---
 3 files changed, 57 insertions(+), 4 deletions(-)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 0096f6b68..95cc7e9b3 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3916,6 +3916,9 @@ union bpf_attr {
 	FN(probe_write_context),\
 	FN(get_sockops_uid_gid),	\
 	FN(sk_original_addr),		\
+	FN(strncpy),			\
+	FN(strnstr),			\
+	FN(strnlen),			\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --git a/kernel/bpf/helpers.c b/kernel/bpf/helpers.c
index 4bb5921a7..eb4fa22cd 100644
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@ -653,6 +653,47 @@ const struct bpf_func_proto bpf_this_cpu_ptr_proto = {
 	.arg1_type	= ARG_PTR_TO_PERCPU_BTF_ID,
 };
 
+BPF_CALL_2(bpf_strnlen, void *, src, size_t, len)
+{
+	return strnlen(src, len);
+}
+
+const struct bpf_func_proto bpf_strnlen_proto = {
+	.func		= bpf_strnlen,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_3(bpf_strnstr, void *, s1, void *, s2, size_t, len)
+{
+	return strnstr(s1, s2, len);
+}
+
+const struct bpf_func_proto bpf_strnstr_proto = {
+	.func		= bpf_strnstr,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+	.arg3_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_3(bpf_strncpy, void *, dst, u32, dst_size, void *, src)
+{
+	return strncpy(dst, src, dst_size);
+}
+
+const struct bpf_func_proto bpf_strncpy_proto = {
+	.func		= bpf_strncpy,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+	.arg3_type	= ARG_ANYTHING,
+};
+
 const struct bpf_func_proto bpf_get_current_task_proto __weak;
 const struct bpf_func_proto bpf_probe_read_user_proto __weak;
 const struct bpf_func_proto bpf_probe_read_user_str_proto __weak;
@@ -697,6 +738,12 @@ bpf_base_func_proto(enum bpf_func_id func_id)
 		return &bpf_ringbuf_discard_proto;
 	case BPF_FUNC_ringbuf_query:
 		return &bpf_ringbuf_query_proto;
+	case BPF_FUNC_strnlen:
+		return &bpf_strnlen_proto;
+	case BPF_FUNC_strncpy:
+		return &bpf_strncpy_proto;
+	case BPF_FUNC_strnstr:
+		return &bpf_strnstr_proto;
 	default:
 		break;
 	}
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 9a61e7ebb..2c470688f 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -2163,8 +2163,8 @@ union bpf_attr {
  *
  * 			# sysctl kernel.perf_event_max_stack=<new value>
  * 	Return
- * 		A non-negative value equal to or less than *size* on success,
- * 		or a negative error in case of failure.
+ * 		The non-negative copied *buf* length equal to or less than
+ * 		*size* on success, or a negative error in case of failure.
  *
  * long bpf_skb_load_bytes_relative(const void *skb, u32 offset, void *to, u32 len, u32 start_header)
  * 	Description
@@ -3448,8 +3448,8 @@ union bpf_attr {
  *
  *			# sysctl kernel.perf_event_max_stack=<new value>
  *	Return
- *		A non-negative value equal to or less than *size* on success,
- *		or a negative error in case of failure.
+ * 		The non-negative copied *buf* length equal to or less than
+ * 		*size* on success, or a negative error in case of failure.
  *
  * long bpf_load_hdr_opt(struct bpf_sock_ops *skops, void *searchby_res, u32 len, u64 flags)
  *	Description
@@ -3916,6 +3916,9 @@ union bpf_attr {
 	FN(probe_write_context),\
 	FN(get_sockops_uid_gid),	\
 	FN(sk_original_addr),		\
+	FN(strncpy),			\
+	FN(strnstr),			\
+	FN(strnlen),			\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
-- 
2.33.0

